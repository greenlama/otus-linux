# -*- mode: ruby -*-
# vi: set ft=ruby :

vm_nodes = {
  "backup" => { :ip => "192.168.56.101", :cpus => "2", :mem => "2048", :disks => { :sata1 => { :dfile => './sata1.vdi', :size => 2000, :port => 1 } } },
  "client" => { :ip => "192.168.56.102", :cpus => "2", :mem => "2048" },
}

Vagrant.configure(2) do |config|
  config.vm.box = "centos/7"
  config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "/home/vagrant/.ssh/id_rsa.pub"
  config.vm.provision "shell", inline: "cat /home/vagrant/.ssh/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys"

  vm_nodes.each_with_index do |(hostname, cfg), index|
    config.vm.synced_folder ".", "/vagrant", disabled: true
    config.vm.define hostname do |node|
      # Set hostname for host
      node.vm.hostname = hostname
      node.vm.provider "virtualbox" do |v|
        v.memory = cfg[:mem]
        v.cpus = cfg[:cpus]
        # Set name for vm in Virtual Box
        v.name = hostname
        if index != vm_nodes.size - 1
          needsController = false
          cfg[:disks].each do |dname, dconf|
              unless File.exist?(dconf[:dfile])
                  v.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                  needsController =  true
              end
          end
          if needsController == true
              v.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
              cfg[:disks].each do |dname, dconf|
                  v.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
              end
          end
        end
      end
      node.vm.network :"private_network",
        ip: cfg[:ip]

      # If the host is the last element of the array do ansible provision
      if index == vm_nodes.size - 1
        config.vm.hostname = hostname
        node.vm.provision "ansible" do |ansible|
          ansible.inventory_path = "inventory"
          ansible.limit = 'all'
          ansible.playbook = "provision.yml"
          ansible.ask_vault_pass = false
          ansible.galaxy_role_file = "requirements.yml"
          ansible.galaxy_command = "ansible-galaxy install --role-file=%{role_file}"
          ansible.raw_ssh_args = ['-o KbdInteractiveAuthentication=yes',
                                  '-o IdentityFile=~/.ssh/id_rsa',
                                  '-o GlobalKnownHostsFile=/dev/null',
                                  '-o UserKnownHostsFile=/dev/null',
                                  '-o StrictHostKeyChecking=no',
                                  '-o ServerAliveInterval=60']
        end
      end

    end
  end
end
